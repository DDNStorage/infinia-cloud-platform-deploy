- name: Infinia Setup and Configuration
  hosts: all
  vars_files:
    - vars.yml
    - secret.yml
  tasks:
    - name: Create Log Directory
      file:
        path: /var/log/infinia
        state: directory
        mode: '0755'
      become: yes

    - name: Copy Infinia Scripts 
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0755'
      loop:
        - { src: "./infinia-node-setup.sh", dest: "/tmp/infinia-node-setup.sh" }
        - { src: "./infinia-cluster-configure.sh", dest: "/tmp/infinia-cluster-configure.sh" }
      become: yes
      tags: copy

    - name: Log Copy Completion
      shell: 'echo "$(date) ‚úÖ Infinia setup scripts copied successfully." >> /var/log/infinia/setup.log'
      become: yes

    - block: # Infinia Setup
        - name: Log Realm Node Setup Start
          shell: 'echo "$(date) üöÄ Starting Realm Node Setup..." >> /var/log/infinia/setup.log'
          become: yes
        
        # - name: Reset Redsetup Before Running Setup
        #   shell: |
        #     echo "$(date) üîÑ Running redsetup --reset..." >> /var/log/infinia/setup.log
        #     sudo redsetup --reset >> /var/log/infinia/setup.log 2>&1 || echo "‚ö†Ô∏è Redsetup Reset Failed!" >> /var/log/infinia/setup.log
        #   become: yes

        - name: Realm Node Setup
          shell: |
            bash -c '
            echo "$(date) ‚úÖ Running Infinia Node Setup..." >> /var/log/infinia/setup.log
            /tmp/infinia-node-setup.sh \
              --realm-entry \
              --version {{ infinia_version }} \
              --realm-secret "{{ realm_secret }}" \
              --admin-password "{{ admin_password }}" >> /var/log/infinia/setup.log 2>&1 \
              --skip-reboot
            '
          args:
            chdir: /tmp
          when: "'role_realm' in group_names"
          become: yes

        - name: Reboot realm node
          reboot:
            reboot_timeout: 600
          when: "'role_realm' in group_names"
          become: yes

        - name: Wait for 60 seconds after reboot
          pause:
            seconds: 60
          when: "'role_realm' in group_names"

        - name: Log Non-Realm Node Setup Start
          shell: 'echo "$(date) üöÄ Starting Non-Realm Node Setup..." >> /var/log/infinia/setup.log'
          become: yes

        # - name: Reset Redsetup Before Running Setup
        #   shell: |
        #     echo "$(date) üîÑ Running redsetup --reset..." >> /var/log/infinia/setup.log
        #     sudo redsetup --reset >> /var/log/infinia/setup.log 2>&1 || echo "‚ö†Ô∏è Redsetup Reset Failed!" >> /var/log/infinia/setup.log
        #   become: yes

        - name: Non-Realm Node Setup
          shell: |
            bash -c '
            echo "$(date) ‚úÖ Running Infinia Node Setup..." >> /var/log/infinia/setup.log
            /tmp/infinia-node-setup.sh \
              --non-realm-entry \
              --ip {{ hostvars[groups["role_realm"][0]].private_ip_address }} \
              --version {{ infinia_version }} \
              --realm-secret "{{ realm_secret }}" \
              --admin-password "{{ admin_password }}" >> /var/log/infinia/setup.log 2>&1 \
              --skip-reboot
            '
          args:
            chdir: /tmp
          when: "'role_nonrealm' in group_names"
          become: yes

        - name: Reboot non-realm node
          reboot:
            reboot_timeout: 600
          when: "'role_nonrealm' in group_names"
          become: yes

        - name: Wait for 60 seconds after reboot
          pause:
            seconds: 60
          when: "'role_nonrealm' in group_names"
      tags: setup

    - block: # Infinia Cluster Setup
        - name: Log Cluster Configuration Start
          shell: 'echo "$(date) üöÄ Starting Infinia Cluster Configuration..." >> /var/log/infinia/setup.log'
          become: yes

        - name: Copy Cluster Configuration Scripts 
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: '0755'
          loop:
            - { src: "./infinia-cluster-configure.sh", dest: "/tmp/infinia-cluster-configure.sh" }
          become: yes
          tags: copy

        - name: Configure the Infinia Cluster
          shell: |
            bash -c '
            echo "$(date) üîÑ Configuring Infinia Cluster..." >> /var/log/infinia/setup.log
            /tmp/infinia-cluster-configure.sh \
              --admin-password "{{ admin_password }}" \
              --license-key "{{ license_key }}" >> /var/log/infinia/setup.log 2>&1
            '
          become: yes

      when: "'role_realm' in group_names"
      become: yes
      tags: configure

    - block: # Verify Infinia setup
        - name: Verify Infinia Cluster Configuration
          shell: |
            bash -c '
            redcli user login realm_admin -p "{{ admin_password }}" >> /var/log/infinia/setup.log 2>&1
            cluster_status=$(redcli cluster show -o json | jq -r ".cluster_state")
            total_nodes=$(redcli cluster show -o json | jq ".instances | length")
            evicted_cats=$(redcli cluster show -o json | jq "[.cats[] | select(.evicted == true)] | length")

            echo "=== Cluster Verification Summary ==="
            echo "üîπ Cluster State: $cluster_status"
            echo "üîπ Total Nodes: $total_nodes"
            echo "üîπ Evicted CATs: $evicted_cats"
            echo "===================================="

            if [[ "$cluster_status" != "running" ]]; then
              echo "‚ùå Cluster is NOT running!"
              exit 1
            fi

            if [[ "$total_nodes" -ne {{ groups['all'] | length }} ]]; then
              echo "‚ùå Number of nodes ($total_nodes) does not match expected ({{ groups['all'] | length }})!"
              exit 1
            fi

            if [[ "$evicted_cats" -ne 0 ]]; then
              echo "‚ùå Some CATs are evicted ($evicted_cats)!"
              exit 1
            fi

            echo "‚úÖ Cluster is correctly configured!"
            '
          become: yes
          register: cluster_verification
          failed_when: cluster_verification.rc != 0

        - name: Display Cluster Verification Output
          debug:
            msg: "{{ cluster_verification.stdout_lines | select('search', 'Cluster State|Total Nodes|Evicted CATs|‚úÖ|‚ùå') | list }}"
      when: "'role_realm' in group_names"
      become: yes
      tags: verify